# Dockerfile.full (copia de referencia)
# Esta es una copia del Dockerfile multi-stage original (root) tomada el 2025-09-05.
# NO usar directamente para el flujo simplificado: para personalizaciones rápidas usar Dockerfile.simple
# y para hot-swap usar Dockerfile.dev. Mantener sólo como referencia comparativa.

ARG FLAVOR=${TARGETARCH}
ARG ROCMVERSION=6.3.3
ARG JETPACK5VERSION=r35.4.1
ARG JETPACK6VERSION=r36.4.0
ARG CMAKEVERSION=3.31.2

FROM --platform=linux/amd64 rocm/dev-almalinux-8:${ROCMVERSION}-complete AS base-amd64
RUN --mount=type=cache,target=/var/cache/dnf --mount=type=cache,target=/var/cache/yum \
    yum install -y yum-utils \
    && yum-config-manager --add-repo https://dl.rockylinux.org/vault/rocky/8.5/AppStream/\$basearch/os/ \
    && rpm --import https://dl.rockylinux.org/pub/rocky/RPM-GPG-KEY-Rocky-8 \
    && dnf install -y yum-utils ccache gcc-toolset-10-gcc-10.2.1-8.2.el8 gcc-toolset-10-gcc-c++-10.2.1-8.2.el8 gcc-toolset-10-binutils-2.35-11.el8 \
    && dnf install -y ccache \
    && yum-config-manager --add-repo https://developer.download.nvidia.com/compute/cuda/repos/rhel8/x86_64/cuda-rhel8.repo
ENV PATH=/opt/rh/gcc-toolset-10/root/usr/bin:$PATH

FROM --platform=linux/arm64 almalinux:8 AS base-arm64
RUN --mount=type=cache,target=/var/cache/dnf --mount=type=cache,target=/var/cache/yum \
    yum install -y yum-utils epel-release \
    && dnf install -y clang ccache \
    && yum-config-manager --add-repo https://developer.download.nvidia.com/compute/cuda/repos/rhel8/sbsa/cuda-rhel8.repo
ENV CC=clang CXX=clang++

FROM base-${TARGETARCH} AS base
ARG CMAKEVERSION
RUN curl -fsSL https://github.com/Kitware/CMake/releases/download/v${CMAKEVERSION}/cmake-${CMAKEVERSION}-linux-$(uname -m).tar.gz | tar xz -C /usr/local --strip-components 1
COPY CMakeLists.txt CMakePresets.json ./
COPY ml/backend/ggml/ggml ml/backend/ggml/ggml
ENV LDFLAGS=-s

FROM base AS cpu
RUN dnf install -y gcc-toolset-11-gcc gcc-toolset-11-gcc-c++
ENV PATH=/opt/rh/gcc-toolset-11/root/usr/bin:$PATH
RUN --mount=type=cache,target=/root/.ccache \
    cmake --preset 'CPU' \
        && cmake --build --parallel --preset 'CPU' \
        && cmake --install build --component CPU --strip --parallel 8

FROM base AS cuda-12
ARG CUDA12VERSION=12.8
RUN --mount=type=cache,target=/var/cache/dnf dnf install -y cuda-toolkit-${CUDA12VERSION//./-}
ENV PATH=/usr/local/cuda-12/bin:$PATH
RUN --mount=type=cache,target=/root/.ccache \
    cmake --preset 'CUDA 12' \
        && cmake --build --parallel --preset 'CUDA 12' \
        && cmake --install build --component CUDA --strip --parallel 8

FROM base AS rocm-6
ENV PATH=/opt/rocm/hcc/bin:/opt/rocm/hip/bin:/opt/rocm/bin:/opt/rocm/hcc/bin:$PATH
RUN --mount=type=cache,target=/root/.ccache \
    cmake --preset 'ROCm 6' \
        && cmake --build --parallel --preset 'ROCm 6' \
        && cmake --install build --component HIP --strip --parallel 8

FROM --platform=linux/arm64 nvcr.io/nvidia/l4t-jetpack:${JETPACK5VERSION} AS jetpack-5
ARG CMAKEVERSION
RUN --mount=type=cache,target=/var/cache/apt --mount=type=cache,target=/var/lib/apt/lists \
    apt-get update && apt-get install -y curl ccache \
    && curl -fsSL https://github.com/Kitware/CMake/releases/download/v${CMAKEVERSION}/cmake-${CMAKEVERSION}-linux-$(uname -m).tar.gz | tar xz -C /usr/local --strip-components 1
COPY CMakeLists.txt CMakePresets.json ./
COPY ml/backend/ggml/ggml ml/backend/ggml/ggml
RUN --mount=type=cache,target=/root/.ccache \
    cmake --preset 'JetPack 5' \
        && cmake --build --parallel --preset 'JetPack 5' \
        && cmake --install build --component CUDA --strip --parallel 8

FROM --platform=linux/arm64 nvcr.io/nvidia/l4t-jetpack:${JETPACK6VERSION} AS jetpack-6
ARG CMAKEVERSION
RUN --mount=type=cache,target=/var/cache/apt --mount=type=cache,target=/var/lib/apt/lists \
    apt-get update && apt-get install -y curl ccache \
    && curl -fsSL https://github.com/Kitware/CMake/releases/download/v${CMAKEVERSION}/cmake-${CMAKEVERSION}-linux-$(uname -m).tar.gz | tar xz -C /usr/local --strip-components 1
COPY CMakeLists.txt CMakePresets.json ./
COPY ml/backend/ggml/ggml ml/backend/ggml/ggml
RUN --mount=type=cache,target=/root/.ccache \
    cmake --preset 'JetPack 6' \
        && cmake --build --parallel --preset 'JetPack 6' \
        && cmake --install build --component CUDA --strip --parallel 8

FROM base AS build
WORKDIR /go/src/github.com/ollama/ollama
COPY go.mod go.sum ./
RUN curl -fsSL https://golang.org/dl/go$(awk '/^go/ { print $2 }' go.mod).linux-$(case $(uname -m) in x86_64) echo amd64 ;; aarch64) echo arm64 ;; esac).tar.gz | tar xz -C /usr/local
ENV PATH=/usr/local/go/bin:$PATH
RUN go mod download
COPY . .
ARG GOFLAGS="'-ldflags=-w -s'"
ENV CGO_ENABLED=1
ARG CGO_CFLAGS
ARG CGO_CXXFLAGS
RUN --mount=type=cache,target=/root/.cache/go-build \
    go build -trimpath -buildmode=pie -o /bin/ollama .

FROM --platform=linux/amd64 scratch AS amd64
COPY --from=cuda-12 dist/lib/ollama /lib/ollama

FROM --platform=linux/arm64 scratch AS arm64
COPY --from=cuda-12 dist/lib/ollama /lib/ollama/cuda_sbsa
COPY --from=jetpack-5 dist/lib/ollama /lib/ollama/cuda_jetpack5
COPY --from=jetpack-6 dist/lib/ollama /lib/ollama/cuda_jetpack6

FROM scratch AS rocm
COPY --from=rocm-6 dist/lib/ollama /lib/ollama

FROM ${FLAVOR} AS archive
COPY --from=cpu dist/lib/ollama /lib/ollama
COPY --from=build /bin/ollama /bin/ollama

FROM scratch AS minimal-certs
COPY --from=archive /etc/ssl/certs /etc/ssl/certs

FROM ubuntu:24.04 AS runtime
ARG UBUNTU_MIRRORS="archive.ubuntu.com security.ubuntu.com mirrors.edge.kernel.org mirror.eu.oneandone.net ubuntu.mirror.wearetriple.com"
ARG APT_MAX_RETRIES=4
ARG APT_SLEEP=6
ARG SKIP_APT=0
ARG APT_FORCE_HTTPS=1
ENV DEBIAN_FRONTEND=noninteractive
RUN --mount=type=cache,target=/var/cache/apt --mount=type=cache,target=/var/lib/apt/lists \
    set -eux; \
        if [ "$SKIP_APT" = "1" ]; then echo "[WARN] SKIP_APT=1: se omite instalación de paquetes"; exit 0; fi; \
        echo "Acquire::Retries \"$APT_MAX_RETRIES\";" > /etc/apt/apt.conf.d/80-retries; \
        echo 'Acquire::ForceIPv4 "true";' > /etc/apt/apt.conf.d/99-force-ipv4; \
        success=0; \
        for m in $UBUNTU_MIRRORS; do \
            echo "== Probando mirror: $m =="; \
            cp /etc/apt/sources.list /etc/apt/sources.list.orig; \
            sed -i "s/archive.ubuntu.com/$m/g" /etc/apt/sources.list; \
            sed -i "s/security.ubuntu.com/$m/g" /etc/apt/sources.list; \
            if [ "$APT_FORCE_HTTPS" = "1" ]; then sed -i 's|http://|https://|g' /etc/apt/sources.list; fi; \
            for attempt in $(seq 1 $APT_MAX_RETRIES); do \
                echo "-- apt-get update intento $attempt (mirror $m)"; \
                if apt-get update; then success=1; break; fi; \
                echo "Fallo update. Esperando $APT_SLEEP s"; sleep $APT_SLEEP; \
            done; \
            if [ $success -eq 1 ]; then break; else mv /etc/apt/sources.list.orig /etc/apt/sources.list; fi; \
        done; \
        if [ $success -ne 1 ]; then echo "[ERROR] No se pudo ejecutar apt-get update con ningún mirror"; exit 1; fi; \
        if ! apt-get install -y --no-install-recommends ca-certificates curl; then \
                echo '[WARN] Instalación directa falló. Intentando descarga manual de paquetes .deb'; \
                mkdir -p /tmp/aptmanual; cd /tmp/aptmanual; \
                baseurl="https://snapshot.ubuntu.com/ubuntu"; echo 'Este snapshot es placeholder si no hay conectividad'; \
                ls /etc/ssl/certs >/dev/null 2>&1 || echo '[WARN] No hay listado de certs'; \
        fi; \
        update-ca-certificates || true; \
        apt-get clean; \
        rm -rf /var/lib/apt/lists/* /etc/apt/sources.list.orig || true
COPY --from=archive /bin /usr/bin
COPY --from=archive /etc/ssl/certs /etc/ssl/certs
ENV PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
COPY --from=archive /lib/ollama /usr/lib/ollama
ENV LD_LIBRARY_PATH=/usr/local/nvidia/lib:/usr/local/nvidia/lib64
ENV NVIDIA_DRIVER_CAPABILITIES=compute,utility
ENV NVIDIA_VISIBLE_DEVICES=all
ENV OLLAMA_HOST=0.0.0.0:11434
EXPOSE 11434
ENTRYPOINT ["/bin/ollama"]
CMD ["serve"]

FROM ubuntu:24.04 AS runtime-cpu
ENV DEBIAN_FRONTEND=noninteractive
RUN --mount=type=cache,target=/var/cache/apt --mount=type=cache,target=/var/lib/apt/lists \
    set -eux; \
    echo 'Acquire::Retries "4";' > /etc/apt/apt.conf.d/80-retries; \
    apt-get update || (sleep 4 && apt-get update) || true; \
    apt-get install -y --no-install-recommends ca-certificates || true; \
    rm -rf /var/lib/apt/lists/*
COPY --from=archive /bin /usr/bin
COPY --from=archive /lib/ollama /usr/lib/ollama
ENV OLLAMA_HOST=0.0.0.0:11434
EXPOSE 11434
ENTRYPOINT ["/bin/ollama"]
CMD ["serve"]
