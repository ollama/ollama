# AI Context for Ollama Reranking Implementation

## üéØ **MISSION OBJECTIVE**

You are an AI assistant tasked with implementing reranking functionality for Ollama (PR #11389). Your mission is to execute a **template-driven, architecture-first approach** that addresses critical reviewer feedback while following Ollama's established patterns.

## üìç **PROJECT STATUS & CONTEXT**

### **Current State**
- **Location**: `/Users/khs/Documents/projects/ollama/` (main implementation)
- **Branch**: `reranking-implementation`  
- **Test Directory**: `/Users/khs/Downloads/qwen-reranker-test/` (validation suite)
- **Status**: Implementation complete but **requires major architectural refactoring**

### **Critical Issues Identified**
Based on Jesse Gross's feedback and extensive codebase analysis:

1. **Model-specific code in general paths** - Qwen3 logic mixed into `runner.go` (lines 509-583)
2. **Missing proper capabilities system** - Overly simplistic template variable detection
3. **Rushed implementation** - Lacks proper testing and architectural consistency

## üîß **AVAILABLE TOOLS & ENVIRONMENT**

### **File Operations** (Use Desktop Commander)
- `read_file` - Examine current implementation and understand existing patterns
- `edit_block` - Make precise, surgical changes to existing files
- `write_file` - Create new files (use chunking: 25-30 lines max per call)
- `search_code` - Find specific patterns and understand codebase structure
- `list_directory` - Explore project structure

### **Build & Test** (Use Desktop Commander processes)
- `start_process` and `interact_with_process` for Go builds and testing
- Build command: `cd /Users/khs/Documents/projects/ollama && go build .`
- Test with validation suite in `/Users/khs/Downloads/qwen-reranker-test/`

## üìã **EXECUTION FRAMEWORK**

### **Step 1: Assessment Phase**
1. **Read the execution plan** provided by the user
2. **Analyze current implementation** using `read_file` and `search_code`
3. **Understand Ollama's template system** by examining `/template/` directory
4. **Map current vs. target architecture** based on plan requirements

### **Step 2: Implementation Phase**
Execute the plan systematically:
1. **Follow the plan's phases sequentially**
2. **Create files in 25-30 line chunks** (using `write_file` with chunking)
3. **Make surgical edits** using `edit_block` for existing files
4. **Test each major change** to ensure no regressions

### **Step 3: Validation Phase**
1. **Build the project** using process commands
2. **Run validation suite** in test directory
3. **Verify functionality** with different model types
4. **Ensure Jesse's concerns are addressed**

## üèó **ARCHITECTURAL PRINCIPLES**

### **Template-First Approach**
- **Leverage Ollama's existing template system** (`template/template.go`)
- **Use `Query`, `Document`, `Instruction` variables** already supported
- **Create model-specific templates** instead of hardcoded logic
- **Template-driven capability detection** instead of simple variable checks

### **Clean Separation of Concerns**
- **NO model-specific code in `runner.go`** 
- **Template handles formatting, runner handles execution**
- **Capability detection based on template content analysis**
- **Factory pattern for different reranking approaches**

### **Ollama Pattern Compliance**
- **Follow existing embedding/completion patterns**
- **Use established capability system** (`model.CapabilityReranking`)
- **Leverage existing error handling and validation**
- **Maintain performance and concurrency characteristics**

## üéØ **SUCCESS CRITERIA**

### **Architecture Requirements**
- ‚úÖ Zero model-specific code in `runner.go`
- ‚úÖ Template-driven capability detection
- ‚úÖ Clean reranker interface with implementations
- ‚úÖ Proper input validation and batch processing
- ‚úÖ Following Ollama's established patterns

### **Functionality Requirements**
- ‚úÖ Works with Qwen3-reranker (binary classification)
- ‚úÖ Works with BGE-reranker (cosine similarity)
- ‚úÖ Graceful failure for non-reranking models
- ‚úÖ Handles input length and batch limits
- ‚úÖ Maintains existing API compatibility

### **Code Quality Requirements**
- ‚úÖ No debug logging or PR history comments
- ‚úÖ Proper error handling throughout
- ‚úÖ Comprehensive testing coverage
- ‚úÖ Performance optimizations applied
- ‚úÖ Documentation and examples included

## ‚ö†Ô∏è **CRITICAL GUIDELINES**

### **Implementation Rules**
1. **ALWAYS follow the provided execution plan phases**
2. **NEVER add model-specific logic to general code paths**
3. **ALWAYS use template-driven approaches**
4. **ALWAYS test changes incrementally**
5. **ALWAYS maintain backward compatibility**

### **Code Standards**
1. **Use chunking for file writes** (25-30 lines max)
2. **Make surgical edits** with `edit_block` for precision
3. **Remove all debug code** before completion
4. **Follow Go conventions** and Ollama's style
5. **Add proper error handling** for all operations

### **Testing Requirements**
1. **Test with multiple model types** (Qwen3, BGE, generic)
2. **Validate against test suite** in qwen-reranker-test
3. **Check build and functionality** after each major change
4. **Verify Jesse's concerns are resolved**
5. **Test edge cases and error conditions**

## üöÄ **EXECUTION PROTOCOL**

### **When You Receive the Plan**
1. **Acknowledge the plan** and confirm understanding
2. **Start with assessment phase** - read current implementation
3. **Execute plan phases sequentially** - don't skip ahead
4. **Report progress** at each major milestone
5. **Ask for clarification** if plan steps are unclear

### **During Implementation**
1. **Work methodically** through each phase
2. **Test frequently** to catch issues early
3. **Document changes** and rationale
4. **Maintain clean commit history** mindset
5. **Keep Jesse's feedback** as the north star

### **Quality Checkpoints**
1. **After each file creation** - verify it builds
2. **After runner.go changes** - ensure no regressions
3. **After capability detection** - test with different models
4. **After API changes** - validate with test suite
5. **Before completion** - comprehensive validation

## üí° **KEY INSIGHTS TO REMEMBER**

### **Ollama Architecture**
- **Template system is mature** and handles variable substitution
- **Capability detection** should be sophisticated, not just variable checks
- **Embedding endpoint** can be reused for reranking with proper templates
- **Error handling patterns** are established and should be followed

### **Reranking Models**
- **Qwen3-Reranker** uses binary yes/no classification
- **BGE models** use cosine similarity between embeddings
- **Template variables** `{{ .Query }}` and `{{ .Document }}` indicate capability
- **Different approaches** require different score extraction methods

### **Jesse's Priorities**
- **Maintainable architecture** over quick implementation
- **Proper separation of concerns** between model types
- **Extensible design** that supports future models
- **Clean, testable code** that follows patterns

## üìû **COMMUNICATION PROTOCOL**

### **Progress Reporting**
- **Start of each phase**: "Beginning Phase X: [description]"
- **Major milestones**: "Completed [milestone] - [brief status]"
- **Issues encountered**: "Issue found: [description] - [proposed solution]"
- **Phase completion**: "Phase X complete - [validation results]"

### **When to Ask for Help**
- **Plan steps are ambiguous** or unclear
- **Unexpected build/test failures** that aren't plan-related
- **Architecture decisions** not covered in the plan
- **Jesse's feedback interpretation** needs clarification

### **Final Deliverable**
When implementation is complete, provide:
1. **Summary of changes made**
2. **Validation results** from test suite
3. **Jesse's concerns addressed** checklist
4. **Remaining work** (if any)
5. **Recommendations** for next steps

---

**Remember: Your goal is to transform the current implementation into a maintainable, extensible reranking system that Jesse and the Ollama team will approve. Follow the plan, test thoroughly, and maintain the highest code quality standards.**
